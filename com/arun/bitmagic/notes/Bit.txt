1. Bitwise AND
A  |  B |  &
------------
0  |  0 |  0
0  |  1 |  0
1  |  0 |  0
1  |  1 |  1

Example : 3 & 6
3 - 0000 0011
6 - 0000 0110
--------------
2 - 0000 0010
--------------

=============================================
2. Bitwise OR

A  |  B | |
------------
0  |  0 |  0
0  |  1 |  1
1  |  0 |  1
1  |  1 |  1

Example : 3 | 6
3 - 0000 0011
6 - 0000 0110
--------------
7 - 0000 0111
--------------

=============================================
3. Bitwise XOR

A  |  B | ^
------------
0  |  0 |  0
0  |  1 |  1
1  |  0 |  1
1  |  1 |  0

Example : 3 | 6
3 - 0000 0011
6 - 0000 0110
--------------
5 - 0000 0101
--------------

==============================================
4. Bitwise NOT

int x = 1;

1  - 0000 0000 0000 0000 0000 0000 0000 0001
~1 - 1111 1111 1111 1111 1111 1111 1111 1110

1. Bitwise NOT Operator always converts a positive number to negative and vise versa
2. How we usually represent negative numbers in Binary Form? -x = 2^32 -x
3. According to point 2, ~1 is 2^32 -1 -1, which makes ~1 as -2

~(1)  - 2
~(-5) - 4

===========================================
5. Bitwise Left Shift

1. Every Bit moves left (0111 -> 1110)

int x = 10;
x - 0000 1010 (10)
x<<2 - 0010 1000 (40)

===========================================
6. Bitwise Signed Right Shift

1. Every Bit moves Right (0111 -> 0011)
2. Signed Right Shift makes sure that if a number is positive/negative the output will also be positive/negative respectively

int x = 10;
x - 0000 1010 (10)
x>>2 - 0000 0010 (2)

int y = -2
y - 1111 1110
y>>2 - 1111 1111

============================================
7. Bitwise Unsigned Right Shift

1.In Signed Right Shift output will always be positive (Fill the remaining bits with 0's no matter what).

int x = -2
x - 1111 1110
x>>>1 - 0111 1111 (2^31 -1 i.e 2147483647)

==========================================
8. Bitwise Tactics

  1. How to set a bit in the number?
  Sol : It can be done using 'OR' operator( | ).
    * First we left shift '1' to n position via (1 << (n-1))
    * Then, use 'OR' operator to set the bit at that position.'OR' operator is used because it will set the bit even if
      the bit is unset previously in binary representation of number 'num'.

  2. How to unset/clear a bit at nth position in the number?
  Sol : It can be done using 'AND' operator( & ).
    * First we left shift '1' to n position via (1 << (n-1))
    * Then, we use bitwise NOT operator '~' to unset this shifted '1'.
    * Now after clearing this left shifted '1' i.e making it to '0' we will 'AND'(&) with the number 'num' that will
      unset bit at nth position.

  3. How to toggle a bit at nth position?
  Sol : We will be using 'XOR' operator here
    * First we left shift '1' to n position via (1 << (n-1)) then XOR the number with it.

  4. How to Check if the bit at nth position is set or unset?
  Sol :
    * Left shift given number 1 by n-1 to create a number that has only set bit as n-th bit. temp = 1 << (n-1)
    * If bitwise AND of n and temp is non-zero, then result is SET else result is NOT SET.

  5. Divide by 2 using bitwise
  Sol :
    * x = x >> 1;
    * x = 18(00010010)
      x >> 1 = 9 (00001001)

  6. Multiply by 2 using bitwise
  Sol :
      * x = x << 1;
      * x = 18(00010010)
        x << 1 = 36 (00100100)

  7. Find log base 2 of a 32-bit integer:
  Sol : log base 2 of a number is basically the power of 2 which produces the number
    * int res = 0
      while (x >>= 1)
          res++;
      return res;
    * We right shift x repeatedly until it becomes 0, meanwhile we keep count on the shift operation. This count value is the log2(x).

  8. Flipping the bits of a number:
  Sol : It can be achieved by using NOT operator.

  9. Swapping Two Numbers
  Sol :
    * a = a ^ b
      b = a ^ b  (a ^ b -> a ^ b ^ b -> a)
      a = a ^ b  (a ^ b -> a ^ b ^ a -> b)

================================================










